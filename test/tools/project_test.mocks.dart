// Mocks generated by Mockito 5.4.4 from annotations
// in com_nicodevelop_xmagicmovie/test/tools/project_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:io' as _i2;

import 'package:com_nicodevelop_xmagicmovie/models/config_model.dart' as _i10;
import 'package:com_nicodevelop_xmagicmovie/models/crop_model.dart' as _i12;
import 'package:com_nicodevelop_xmagicmovie/models/size_model.dart' as _i4;
import 'package:com_nicodevelop_xmagicmovie/models/video_data_model.dart'
    as _i5;
import 'package:com_nicodevelop_xmagicmovie/services/config_service.dart'
    as _i9;
import 'package:com_nicodevelop_xmagicmovie/services/file_manager.dart' as _i3;
import 'package:com_nicodevelop_xmagicmovie/services/video_manager.dart'
    as _i11;
import 'package:cross_file/cross_file.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileManager_1 extends _i1.SmartFake implements _i3.FileManager {
  _FakeFileManager_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSizeModel_2 extends _i1.SmartFake implements _i4.SizeModel {
  _FakeSizeModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoDataModel_3 extends _i1.SmartFake
    implements _i5.VideoDataModel {
  _FakeVideoDataModel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileManager extends _i1.Mock implements _i3.FileManager {
  MockFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Directory> getWorkingDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getWorkingDirectory,
          [],
        ),
        returnValue: _i6.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getWorkingDirectory,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Directory>);

  @override
  String getFileName(_i7.XFile? file) => (super.noSuchMethod(
        Invocation.method(
          #getFileName,
          [file],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #getFileName,
            [file],
          ),
        ),
      ) as String);

  @override
  String replaceFileExtension(
    String? path,
    String? newExtension,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceFileExtension,
          [
            path,
            newExtension,
          ],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #replaceFileExtension,
            [
              path,
              newExtension,
            ],
          ),
        ),
      ) as String);

  @override
  _i6.Future<Map<String, String>> generateUniqueFileName(_i7.XFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateUniqueFileName,
          [file],
        ),
        returnValue: _i6.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i6.Future<Map<String, String>>);

  @override
  _i6.Future<String> getFilePath(
    String? projectId,
    String? fileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilePath,
          [
            projectId,
            fileName,
          ],
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #getFilePath,
            [
              projectId,
              fileName,
            ],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<void> saveJsonFile(
    String? path,
    String? fileName,
    Map<String, dynamic>? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveJsonFile,
          [
            path,
            fileName,
            data,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<Map<String, dynamic>> readJsonFile(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #readJsonFile,
          [path],
        ),
        returnValue:
            _i6.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i6.Future<Map<String, dynamic>>);

  @override
  _i6.Future<void> deleteDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteDirectory,
          [path],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [ConfigService].
///
/// See the documentation for Mockito's code generation for more information.
class MockConfigService extends _i1.Mock implements _i9.ConfigService {
  MockConfigService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FileManager get fileManager => (super.noSuchMethod(
        Invocation.getter(#fileManager),
        returnValue: _FakeFileManager_1(
          this,
          Invocation.getter(#fileManager),
        ),
      ) as _i3.FileManager);

  @override
  _i6.Future<List<_i10.ConfigModel>> loadConfigs() => (super.noSuchMethod(
        Invocation.method(
          #loadConfigs,
          [],
        ),
        returnValue:
            _i6.Future<List<_i10.ConfigModel>>.value(<_i10.ConfigModel>[]),
      ) as _i6.Future<List<_i10.ConfigModel>>);

  @override
  _i6.Future<void> saveConfig(_i10.ConfigModel? config) => (super.noSuchMethod(
        Invocation.method(
          #saveConfig,
          [config],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [VideoManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoManager extends _i1.Mock implements _i11.VideoManager {
  MockVideoManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FileManager get fileManager => (super.noSuchMethod(
        Invocation.getter(#fileManager),
        returnValue: _FakeFileManager_1(
          this,
          Invocation.getter(#fileManager),
        ),
      ) as _i3.FileManager);

  @override
  _i6.Future<_i4.SizeModel> getVideoSize(_i7.XFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoSize,
          [file],
        ),
        returnValue: _i6.Future<_i4.SizeModel>.value(_FakeSizeModel_2(
          this,
          Invocation.method(
            #getVideoSize,
            [file],
          ),
        )),
      ) as _i6.Future<_i4.SizeModel>);

  @override
  _i6.Future<String?> cropVideo(
    _i5.VideoDataModel? file,
    _i4.SizeModel? videoSize,
    _i12.CropModel? crop,
    void Function(int)? onProgress,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cropVideo,
          [
            file,
            videoSize,
            crop,
            onProgress,
          ],
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<_i5.VideoDataModel> createVideoDataModel(
    String? projectId,
    String? sourceFileName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createVideoDataModel,
          [
            projectId,
            sourceFileName,
          ],
        ),
        returnValue: _i6.Future<_i5.VideoDataModel>.value(_FakeVideoDataModel_3(
          this,
          Invocation.method(
            #createVideoDataModel,
            [
              projectId,
              sourceFileName,
            ],
          ),
        )),
      ) as _i6.Future<_i5.VideoDataModel>);

  @override
  _i6.Future<_i5.VideoDataModel> processFile(_i7.XFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #processFile,
          [file],
        ),
        returnValue: _i6.Future<_i5.VideoDataModel>.value(_FakeVideoDataModel_3(
          this,
          Invocation.method(
            #processFile,
            [file],
          ),
        )),
      ) as _i6.Future<_i5.VideoDataModel>);
}
