// Mocks generated by Mockito 5.4.4 from annotations
// in com_nicodevelop_xmagicmovie/test/services/upload_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i2;

import 'package:com_nicodevelop_xmagicmovie/models/crop_model.dart' as _i8;
import 'package:com_nicodevelop_xmagicmovie/models/size_model.dart' as _i3;
import 'package:com_nicodevelop_xmagicmovie/models/video_data_model.dart'
    as _i7;
import 'package:com_nicodevelop_xmagicmovie/services/file_manager.dart' as _i9;
import 'package:com_nicodevelop_xmagicmovie/services/video_manager.dart' as _i4;
import 'package:cross_file/cross_file.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSizeModel_1 extends _i1.SmartFake implements _i3.SizeModel {
  _FakeSizeModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [VideoManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockVideoManager extends _i1.Mock implements _i4.VideoManager {
  MockVideoManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Directory get workingDir => (super.noSuchMethod(
        Invocation.getter(#workingDir),
        returnValue: _FakeDirectory_0(
          this,
          Invocation.getter(#workingDir),
        ),
      ) as _i2.Directory);

  @override
  _i5.Future<_i3.SizeModel> getVideoSize(_i6.XFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoSize,
          [file],
        ),
        returnValue: _i5.Future<_i3.SizeModel>.value(_FakeSizeModel_1(
          this,
          Invocation.method(
            #getVideoSize,
            [file],
          ),
        )),
      ) as _i5.Future<_i3.SizeModel>);

  @override
  _i5.Future<void> cropVideo(
    _i7.VideoDataModel? file,
    _i3.SizeModel? videoSize,
    _i8.CropModel? crop,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cropVideo,
          [
            file,
            videoSize,
            crop,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [FileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileManager extends _i1.Mock implements _i9.FileManager {
  MockFileManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Directory> getWorkingDirectory() => (super.noSuchMethod(
        Invocation.method(
          #getWorkingDirectory,
          [],
        ),
        returnValue: _i5.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getWorkingDirectory,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Directory>);

  @override
  String getFileName(_i6.XFile? file) => (super.noSuchMethod(
        Invocation.method(
          #getFileName,
          [file],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #getFileName,
            [file],
          ),
        ),
      ) as String);

  @override
  _i5.Future<Map<String, String>> generateUniqueFileName(_i6.XFile? file) =>
      (super.noSuchMethod(
        Invocation.method(
          #generateUniqueFileName,
          [file],
        ),
        returnValue: _i5.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i5.Future<Map<String, String>>);

  @override
  _i5.Future<String> getFilePath(String? fileName) => (super.noSuchMethod(
        Invocation.method(
          #getFilePath,
          [fileName],
        ),
        returnValue: _i5.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getFilePath,
            [fileName],
          ),
        )),
      ) as _i5.Future<String>);
}
